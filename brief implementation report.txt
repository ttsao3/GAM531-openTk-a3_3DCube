Include a brief report (1-2 paragraphs) explaining your implementation:


Perspective camera implemented using CreatePerspectiveFieldOfView with initial 45 degrees fov, aspect ratio based on window size, near plane and far plane at 0.1 and 100.

View Matrix set up the view with Matrix4.LookAt using the camera position i created ( cameraPos, cameraFront, cameraUp ).

Keyboard camera movement implemented using IsKeyDown in my OnUpdateFrame, and camera position was adjusted by cameraFront (forward/backward) and the cross product of cameraFront and cameraUp (left/right) and speed in deltaTime.

Mouse look implemented by overriding OnMouseMove, yaw and pitch was added to control camera rotation, _lastPos to store mouse coordinates to track mouse movement between frames and _firstMove to initialize mouse position. Pitch was clamped between -89 and 89 degrees to prevent camera flip, also added CursorState.Grabbed in onLoad to make sure my cursor was invisible and lock to my lunch window so I can control my camera without cursor leaving the window.

Zooming with Mousewheel implemeted by overriding OnMouseWheel, adjust fov by subtracting offextY * 5.0 (5.0 to change fov speed), and clamped fov to between 30 and 90 for reasonable zoom levels.

finally update CreatePerspectiveFieldOfView to use dynamic fov, to make sure projection matrix shows the correct zoom level when mouse wheel is crolled.


Challenges I faced:
I was having some window focus issue with my camera in assignment 5, but in assignment 6, I have got a clear idea how to fix the issue i was having, simply just by adding this line of code into my onLoad(), so my cursor won't stop when hitting the edge of my laptop screen


"CursorState = CursorState.Grabbed;"
